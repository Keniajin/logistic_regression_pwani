chmi_full$Site <- as.factor(ifelse(chmi_full$Site==2,"Kilifi2017", ifelse(chmi_full$Site==1, "Kilifi2016","Nairobi")))
tmp <- inner_join(chmi_phil_cat, chmi_schizont)
chmi_full <- inner_join(tmp, chmi_full)
chmi_full$Residence <- ifelse(chmi_full$Residence=="Junju" | chmi_full$Residence=="Pingilikani","1KilifiSouth", ifelse(chmi_full$Residence=="Ngerenya", "2KilifiNorth", "3Nairobi"))
# sample ID for the duplicated sample
duplicated_sample <- chmi_full$sampleID[which(duplicated(chmi_full$sampleID))]
#chmi_full <- chmi_full[!(chmi_full$sampleID==duplicated_sample), ]
chmi_full <- chmi_full[!duplicated(chmi_full$sampleID),]
x <- names(chmi_full)[11:dim(chmi_full)[2]]
x <- sapply(x, function(x){unlist(strsplit(x,"_"))[1]})
names(chmi_full)[11:dim(chmi_full)[2]] <- x
# Boxplots
rownames(chmi_full) <- chmi_full$sampleID
chmi_full <- cbind(as.data.frame.matrix(apply(chmi_full[,1:10],2, function(x){ifelse(x=="","unspecified", x)})), chmi_full[,11:dim(chmi_full)[2]])
# Remove commercial IgG
tmp <-  melt(chmi_full, id.vars = c("sampleID", "TX", "Imm_status", "Category","Gender","Residence", "Site", "outcome1", "Schizont_status"))
tmp$value <- as.numeric(tmp$value)
x <- chmi_full %>% select(Residence, Schizont_AU)
x$Residence <- gsub('[0-9]+', '', x$Residence)
x$Residence <- gsub('Kilifi', 'Kilifi ', x$Residence)
x$Schizont_AU <- as.numeric(x$Schizont_AU)
#ggplot(data=tmp , aes(x=Residence , y=as.numeric(Schizont_AU))) + geom_boxplot() + geom_jitter() + theme_classic() + xlab("Site") + ylab(" Schizont Antiboy Units")
my_comparisons <- list(c("Kilifi North", "Kilifi South"), c("Kilifi North", "Nairobi"), c("Kilifi South", "Nairobi"))
p <- ggboxplot(x,
x = "Residence",
y = "Schizont_AU",
add = "jitter")
p+stat_compare_means(comparisons = my_comparisons)+ # Add pairwise comparisons p-value
stat_compare_means(label.y = 200)+     # Add global p-value
labs(x="Site", y= "Schizont Antibody Units")
## Boxplots
## Raw predicted MFI
ggplot(filter(tmp, variable %ni% "Schizont_AU"), aes(x=reorder(variable, value, median), y=value))+geom_boxplot()+coord_flip()+theme_classic()+xlab("Antigen")+ylab("MFI (Raw)")+theme(axis.text=element_text(size=10),
axis.title=element_text(size=20))
## Log-transformed MFI
ggplot(tmp, aes(x=reorder(variable, value, median), y=log(value+0.01)))+geom_boxplot()+coord_flip()+theme_classic()+xlab("Antigen")+ylab("MFI (Log-scale)")+theme(axis.text=element_text(size=10),
axis.title=element_text(size=20))
a <- chmi_full[,-c(1:10)]
## add the shizont AU
a <- cbind(a ,Schizont_AU=as.numeric(chmi_full$Schizont_AU ))
rownames(a) <- rownames(chmi_full)
for (i in 1:129) {
for(j in 1:112) {
if(a[i,j]<0){
a[i,j]=abs(rnorm(1,100,200))
}else a[i,j]=a[i,j]
}
}
pc <- prcomp(log(a_pc+0.01), scale=T)
a_pc <- a[,1:111]# without schizont AU
pc <- prcomp(log(a_pc+0.01), scale=T)
#cor(pc$rotation[,1], pc$center)
fviz_eig(pc)
fviz_pca_ind(pc,label="none",
col.ind = as.factor(chmi_full$Residence),
repel = TRUE,
addEllipses = TRUE,
legend.title="Site"
)+scale_color_hue(l=40, c=35)
fviz_pca_ind(pc,label="none",
col.ind = as.factor(chmi_full$TX),
repel = TRUE,
addEllipses = TRUE,
legend.title="Treatment"
)+scale_color_hue(l=40, c=35)
#              col.ind = as.factor(chmi_full$Category),
#              repel = TRUE,
#              addEllipses = TRUE,
#              legend.title="Category"
#              )
# fviz_pca_ind(pc,label="none",
#              col.ind = as.factor(chmi_full$Gender),
#              repel = TRUE,
#              addEllipses = TRUE,
#              legend.title="Gender")
pc1 <- pc$rotation[,1]
idx <- order(chmi_full$Residence)
mat <- chmi_full[idx,-c(1:10)]
mat <- mat + 0.01
mat <- as.matrix(mat)
mat_scaled = t(apply(mat, 1, scale))
Residence=as.character(chmi_full$Residence)[idx]
df=data.frame(Site=Residence)
df$Site <- ifelse(df$Site=="1KilifiSouth", "Kilifi South", ifelse(df$Site=="2KilifiNorth", "Kilifi North","Nairobi"))
ha = HeatmapAnnotation(df,
gap = unit(0.5, "cm"),
annotation_legend_param = list(Residence=list(title = "Site",
title_gp = gpar(fontsize = 15),
labels_gp = gpar(fontsize = 20)
),
grid_height=unit(1.5,"cm"),
grid_width=unit(1,"cm")
),
col=list(Site = c("Kilifi South" = "black", "Nairobi" = "blue", "Kilifi North"="purple"))
)
Heatmap(mat_scaled,
name = "Reactivity",
cluster_rows = FALSE,
cluster_columns = FALSE,
#km = 5,
col = colorRamp2(c(-2, 0, 2), c("green", "black", "red")),
#col=col_fun,
top_annotation = ha,
top_annotation_height = unit(1.5, "cm"),
show_row_names = FALSE,
show_column_names = FALSE,
show_column_dend = FALSE,
heatmap_legend_param = list(color_bar = "continuous", grid_width=unit(5, "mm"), grid_height=unit(20,"mm"))
)
Heatmap(mat_scaled,
name = "Reactivity",
cluster_rows = FALSE,
cluster_columns = FALSE,
#km = 5,
col = colorRamp2(c(-2, 0, 2), c("green", "black", "red")),
#col=col_fun,
top_annotation = ha,
top_annotation_height = unit(1.5, "cm"),
show_row_names = FALSE,
show_column_names = FALSE,
show_column_dend = FALSE,
heatmap_legend_param = list(color_bar = "continuous", grid_width=unit(5, "mm"), grid_height=unit(20,"mm"))
)
pheatmap::pheatmap(mat_scaled)
pheatmap::pheatmap(mat_scaled, color=greenred(75))
library(tidyverse)
library(pheatmap)
library(gplots)
library(magrittr)
pheatmap::pheatmap(mat_scaled, color=greenred(75))
pheatmap::pheatmap(mat_scaled, color=greenred(75), cluster_cols = F, cluster_rows = F)
pheatmap::pheatmap(mat_scaled, color=greenred(75), cluster_cols = F, cluster_rows = F)
pheatmap::pheatmap(mat_scaled, color=greenred(75), cluster_cols = F, cluster_rows = F)
pheatmap::pheatmap(mat_scaled, color=colorRamp2(c(-2, 0, 2), c("green", "black", "red")), cluster_cols = F, cluster_rows = F, show_rownames = F)
mat_scaled
mat_scaled = t(apply(mat, 1, scale))
pheatmap::pheatmap(mat_scaled, color=colorRamp2(c(-2, 0, 2), c("green", "black", "red")), cluster_cols = F, cluster_rows = F, show_rownames = F)
pheatmap::pheatmap(mat_scaled,  cluster_cols = F, cluster_rows = F, show_rownames = F)
pheatmap::pheatmap(mat_scaled, color=color=greenred(3), cluster_cols = F, cluster_rows = F, show_rownames = F)
pheatmap::pheatmap(mat_scaled, color=greenred(3), cluster_cols = F, cluster_rows = F, show_rownames = F)
mat_scaled
pheatmap(mat_scaled, color=greenred(3), cluster_cols = F, cluster_rows = F, show_rownames = F)
?pheatmap
pheatmap(mat_scaled, color=greenred(3), cluster_cols = F, cluster_rows = F, show_rownames = F, scale="none")
mean(mat_scaled)
View(mat_scaled)
mymat <- matrix(rexp(720, rate=.1), ncol=12)
colnames(mymat) <- c(rep("treatment_1", 3), rep("treatment_2", 3), rep("treatment_3", 3), rep("treatment_4", 3))
rownames(mymat) <- paste("gene", 1:dim(mymat)[1], sep="_")
annotdf <- data.frame(row.names = rownames(mymat),
category = rep(paste0("Category_", seq(12)), each=5) )
newCols <- colorRampPalette(grDevices::rainbow(length(unique(annotdf$category))))
mycolors <- newCols(length(unique(annotdf$category)))
names(mycolors) <- unique(annotdf$category)
mycolors <- list(category = mycolors)
mycolors
mycolors
newCols <- colorRampPalette(grDevices::rainbow(length(unique(annotdf$category))))
mycolors <- newCols(length(unique(annotdf$category)))
mycolors
colfunc <- colorRampPalette(c("white", "red"))
colfunc(10)
plot(rep(1,10),col=colfunc(10),pch=19,cex=3)
19500+6100
library(devtools)
install_github("adamkucharski/scrapR")
library(scrapR)
devtools::install_github("adamkucharski/scrapR")
library(scrapR)
simulate_PDF_data()
library(tidyverse)
library(magrittr)
simulate_PDF_data()
load_PDF_data(file_name="figure1.pdf")
library(grImport)
load_PDF_data(file_name="figure1.pdf")
simulate_PDF_data()
load_PDF_data(file_name="figure1.pdf")
setwd("~/")
load_PDF_data(file_name="figure1.pdf")
simulate_PDF_data()
load_PDF_data(file_name="figure1.pdf")
getwd()
load_PDF_data(file_name="figure1.pdf")
cdata <- haven::read_dta("https://stats.idre.ucla.edu/stat/data/crime.dta")
summary(cdata)
summary(ols <- lm(crime ~ poverty + single, data = cdata))
library(ggpubr)
?ggradar
?ggradar
install.packages("ggiraphExtra")
library(ggradar)
install.packages("ggradar")
devtools::install_github("ricardo-bion/ggradar",
dependencies=TRUE)
library(ggradar)
devtools::install_github("ricardo-bion/ggradar",
dependencies=F)
library(ggradar)
install.packages("D:/ggradar-master.zip", repos = NULL, type = "win.binary")
library(ggradar)
library(ggRadar)
library(ggiraphExtra)
require(ggplot2)
require(ggiraph)
require(plyr)
require(reshape2)
require(moonBook)
require(sjmisc)
ggRadar(data=iris,aes(group=Species))
install.packages(c("backports", "bookdown", "broom", "callr", "caret", "circlize", "ddalpha", "dimRed", "effects", "emmeans", "FSA", "ggeffects", "ggpubr", "GLMMadaptive", "grImport", "haven", "htmlTable", "httpuv", "httr", "ipred", "jmvcore", "jomo", "jsonlite", "knitr", "lava", "libcoin", "lme4", "markdown", "mclust", "meta", "ModelMetrics", "openssl", "overlapping", "pheatmap", "pillar", "pkgload", "prediction", "processx", "ps", "psych", "quantreg", "rcmdcheck", "Rcpp", "RcppEigen", "readr", "readxl", "recipes", "remotes", "rio", "rmarkdown", "RMySQL", "sessioninfo", "sfsmisc", "shiny", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "spatstat.utils", "survey", "tibble", "TMB", "xts"))
install.packages(c("backports", "bookdown", "broom", "callr", "caret", "circlize", "ddalpha", "dimRed", "effects", "emmeans", "FSA", "ggeffects", "ggpubr", "GLMMadaptive", "grImport", "haven", "htmlTable", "httpuv", "httr", "ipred", "jmvcore", "jomo", "jsonlite", "knitr", "lava", "libcoin", "lme4", "markdown", "mclust", "meta", "ModelMetrics", "openssl", "overlapping", "pheatmap", "pillar", "pkgload", "prediction", "processx", "ps", "psych", "quantreg", "rcmdcheck", "Rcpp", "RcppEigen", "readr", "readxl", "recipes", "remotes", "rio", "rmarkdown", "RMySQL", "sessioninfo", "sfsmisc", "shiny", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "spatstat.utils", "survey", "tibble", "TMB", "xts"))
install.packages(c("backports", "bookdown", "broom", "callr", "caret", "circlize", "ddalpha", "dimRed", "effects", "emmeans", "FSA", "ggeffects", "ggpubr", "GLMMadaptive", "grImport", "haven", "htmlTable", "httpuv", "httr", "ipred", "jmvcore", "jomo", "jsonlite", "knitr", "lava", "libcoin", "lme4", "markdown", "mclust", "meta", "ModelMetrics", "openssl", "overlapping", "pheatmap", "pillar", "pkgload", "prediction", "processx", "ps", "psych", "quantreg", "rcmdcheck", "Rcpp", "RcppEigen", "readr", "readxl", "recipes", "remotes", "rio", "rmarkdown", "RMySQL", "sessioninfo", "sfsmisc", "shiny", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "spatstat.utils", "survey", "tibble", "TMB", "xts"))
install.packages(c("backports", "bookdown", "broom", "callr", "caret", "circlize", "ddalpha", "dimRed", "effects", "emmeans", "FSA", "ggeffects", "ggpubr", "GLMMadaptive", "grImport", "haven", "htmlTable", "httpuv", "httr", "ipred", "jmvcore", "jomo", "jsonlite", "knitr", "lava", "libcoin", "lme4", "markdown", "mclust", "meta", "ModelMetrics", "openssl", "overlapping", "pheatmap", "pillar", "pkgload", "prediction", "processx", "ps", "psych", "quantreg", "rcmdcheck", "Rcpp", "RcppEigen", "readr", "readxl", "recipes", "remotes", "rio", "rmarkdown", "RMySQL", "sessioninfo", "sfsmisc", "shiny", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "spatstat.utils", "survey", "tibble", "TMB", "xts"))
library(meta)
data(Fleiss93cont)
meta1 <- metacont(n.e, mean.e, sd.e, n.c, mean.c, sd.c, data=Fleiss93cont, sm="SMD")
meta1
forest(meta1)
?forest
options(OutDec="\xB7")
forest(meta1)
options(OutDec="\xB1")
forest(meta1)
options(OutDec="\xB2")
forest(meta1)
options(OutDec="\xB7")
forest(meta1)
forestplot(meta1)
library(forestplot)
install.packages("forestplot")
forestplot::forestplot(meta1)
meta1
library(MASS)
summary(rlm(stack.loss ~ ., stackloss))
stackloss
stackloss <- stackloss
View(stackloss)
library(tidyverse)
stack.loss[stack.loss<10]
-stack.loss[stack.loss<10]
stack.loss[stack.loss<10] <- -stack.loss[stack.loss<10]
library(MASS)
library(tidyverse)
stackloss <- stackloss
stackloss[stackloss<10]
stackloss[stackloss<10] <- -stackloss[stackloss<10]
View(stackloss)
summary(rlm(stack.loss ~ ., stackloss))
rlm(stack.loss ~ ., stackloss, psi = psi.hampel, init = "lts")
rlm(stack.loss ~ ., stackloss, psi = psi.bisquare)
### the source
# library
library(tidyverse)
library(viridis)
# Create dataset
data=data.frame(
individual=paste( "Mister ", seq(1,60), sep=""),
group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,
value1=sample( seq(10,100), 60, replace=T),
value2=sample( seq(10,100), 60, replace=T),
value3=sample( seq(10,100), 60, replace=T)
)
# Transform data in a tidy format (long format)
data = data %>% gather(key = "observation", value="value", -c(1,2))
View(data)
library(dplyr, warn.conflicts = FALSE)
df <- tibble(
group = c(1:2, 1),
item_id = c(1:2, 2),
item_name = c("a", "b", "b"),
value1 = 1:3,
value2 = 4:6
)
df
df %>% complete(group, nesting(item_id, item_name))
### the source
# library
library(tidyverse)
library(viridis)
# Create dataset
data=data.frame(
individual=paste( "Mister ", seq(1,60), sep=""),
group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,
value1=sample( seq(10,100), 60, replace=T),
value2=sample( seq(10,100), 60, replace=T),
value3=sample( seq(10,100), 60, replace=T)
)
# Transform data in a tidy format (long format)
data = data %>% gather(key = "observation", value="value", -c(1,2))
# Set a number of 'empty bar' to add at the end of each group
empty_bar=2
nObsType=nlevels(as.factor(data$observation))
to_add = data.frame( matrix(NA, empty_bar*nlevels(data$group)*nObsType, ncol(data)) )
colnames(to_add) = colnames(data)
to_add$group=rep(levels(data$group), each=empty_bar*nObsType )
data=rbind(data, to_add)
data=data %>% arrange(group, individual)
data$id=rep( seq(1, nrow(data)/nObsType) , each=nObsType)
# Get the name and the y position of each label
label_data= data %>% group_by(id, individual) %>% summarize(tot=sum(value))
number_of_bar=nrow(label_data)
angle= 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust<-ifelse( angle < -90, 1, 0)
label_data$angle<-ifelse(angle < -90, angle+180, angle)
View(label_data)
View(data)
View(data)
#             x1 x2                       r = A OR B
x <- matrix(c(0, 0,                       #      0
0, 1,                       #      1
1, 0,                       #      1
1, 1), ncol = 2, byrow = T) #      1
r <- c(0, 0, 0, 1)
b <- __
w <- c(3, 4)
b <- 1
w <- c(3, 4)
ifelse(x %*% w + b > 0, 1, 0) == r
x %*% w + b
x <- matrix(c(0, 0,                       #       0
0, 1,                       #       0
1, 0,                       #       0
1, 1), ncol = 2, byrow = T) #       1
r <- c(0, 0, 0, 1)
b <- 1
w <- c(0, 0)
ifelse(x %*% w + b > 0, 1, 0) == r
r
#             x1 x2                       r = A AND B
x <- matrix(c(0, 0,                       #       0
0, 1,                       #       0
1, 0,                       #       0
1, 1), ncol = 2, byrow = T) #       1
r <- c(0, 0, 0, 1)
b <- 1
ifelse(x %*% w + b > 0, 1, 0) == r
r
#             x1 x2                       r = A AND B
x <- matrix(c(0, 0,                       #       0
0, 1,                       #       0
1, 0,                       #       0
1, 1), ncol = 2, byrow = T) #       1
r <- c(0, 0, 0, 1)
b <- 0
w <- c(0.5, 0.5)
ifelse(x %*% w + b > 0, 1, 0) == r
#             x1 x2                       r = A OR B
x <- matrix(c(0, 0,                       #      0
0, 1,                       #      1
1, 0,                       #      1
1, 1), ncol = 2, byrow = T) #      1
r <- c(0, 1, 1, 1)
b <- 0
w <- c(0.5_, 0.5)
#             x1 x2                       r = A OR B
x <- matrix(c(0, 0,                       #      0
0, 1,                       #      1
1, 0,                       #      1
1, 1), ncol = 2, byrow = T) #      1
r <- c(0, 1, 1, 1)
b <- 0
w <- c(0.5, 0.5)
ifelse(x %*% w + b > 0, 1, 0) == r
#             x1 x2                       r = A AND B
x <- matrix(c(0, 0,                       #       0
0, 1,                       #       0
1, 0,                       #       0
1, 1), ncol = 2, byrow = T) #       1
r <- c(0, 0, 0, 1)
b <- 0.5
w <- c(0.5, 0.5)
ifelse(x %*% w + b > 0, 1, 0) == r
#             A  B                        r = A XOR B
x <- matrix(c(0, 0,                       #       0
0, 1,                       #       1
1, 0,                       #       1
1, 1), ncol = 2, byrow = T) #       0
r <- c(0, 1, 1, 0)
b <- 1
w <- c(0, 0)
ifelse(x %*% w + b > 0, 1, 0) == r
#             A  B  (1 for bias)             r = A XOR B
x <- matrix(c(0, 0, 1,                       #       0
0, 1, 1,                       #       1
1, 0, 1,                       #       1
1, 1, 1), ncol = 3, byrow = T) #       0
r <- c(0, 1, 1, 0)
w <- matrix(c( 0.5,  0.5,  0.5,
0.5,  0.5,  0.5,
0.5,  0.5,  0.5), ncol = 3, byrow = T)
yh <- ifelse(x %*% w[,1:2] > 0, 1, 0)
x3 <- matrix(c(yh[,1], yh[,2], c(1,1,1,1)), ncol = 3)
ifelse(x3 %*% w[,3] > 0, 1, 0) == r
#             A  B  (1 for bias)             r = A XOR B
x <- matrix(c(0, 0, 1,                       #       0
0, 1, 1,                       #       1
1, 0, 1,                       #       1
1, 1, 1), ncol = 3, byrow = T) #       0
r <- c(0, 1, 1, 0)
w <- matrix(c( 0.5,  -0.5,  0.5,
0.5,  -0.5,  0.5,
0.0,  1.0,  -0.5), ncol = 3, byrow = T)
yh <- ifelse(x %*% w[,1:2] > 0, 1, 0)
x3 <- matrix(c(yh[,1], yh[,2], c(1,1,1,1)), ncol = 3)
ifelse(x3 %*% w[,3] > 0, 1, 0) == r
w_1=0.1; w_2=0.2; b=0.3; learn=0.1;
x <- matrix(c(0, 0, 1, 1,
0, 1, 0, 1), nrow = 4)
r <-        c(0, 0, 0, 1)
f <- function(w_1, w_2, b, x_1, x_2) w_1 * x_1 + w_2 * x_2 + b
step <- function(x) ifelse(x < 0, 0, 1)
for (i in 1:1000) {
f_1 <- f(w_1, w_2, b, x[,1], x[,2])
w_1 <- w_1 - sum(learn * (2 * (pmax(0, f_1) - r) * step(f_1) * x[,1]))
w_2 <- w_2 - sum(learn * (2 * (pmax(0, f_1) - r) * step(f_1) * x[,2]))
b <- b - sum(learn * (2 * (pmax(0, f_1) - r)) * step(f_1))
}
(f(w_1, w_2, b, x[,1], x[,2]) > 0.01) == as.logical(r)
w_1=0.1; w_2=0.2; b=0.3; learn=0.1;
x <- matrix(c(0, 0, 1, 1,
0, 1, 0, 1), nrow = 4)
r <-        c(0, 0, 0, 1)
f <- function(w_1, w_2, b, x_1, x_2) w_1 * x_1 + w_2 * x_2 + b
step <- function(x) ifelse(x < 0, 0, 1)
w_1=0.1; w_2=0.2; b=0.3; learn=0.1;
x <- matrix(c(0, 0, 1, 1,
0, 1, 0, 1), nrow = 4)
r <-        c(0, 0, 0, 1)
f <- function(w_1, w_2, b, x_1, x_2) w_1 * x_1 + w_2 * x_2 + b
step <- function(x) ifelse(x < 0, 0, 1)
w_1=0.1; w_2=0.2; b=0.3; learn=0.1;
x <- matrix(c(0, 0, 1, 1,
0, 1, 0, 1), nrow = 4)
r <-        c(0, 0, 0, 1)
f <- function(w_1, w_2, b, x_1, x_2) w_1 * x_1 + w_2 * x_2 + b
step <- function(x) ifelse(x < 0, 0, 1)
for (i in 1:1000) {
f_1 <- f(w_1, w_2, b, x[,1], x[,2])
w_1 <- w_1 - sum(learn * (2 * (pmax(0, f_1) - r) * step(f_1) * x[,1]))
w_2 <- w_2 - sum(learn * (2 * (pmax(0, f_1) - r) * step(f_1) * x[,2]))
b <- b - sum(learn * (2 * (pmax(0, f_1) - r)) * step(f_1))
}
(f(w_1, w_2, b, x[,1], x[,2]) > 0.01) == as.logical(r)
install.packages("tensorflow")
install_tensorflow()
library(tensorflow)
install_tensorflow()
install.packages("kera")
install.packages("keras")
install_tensorflow()
install.packages("tensorflow")
library("tensorflow")
install_tensorflow()
library("tensorflow")
install_tensorflow()
library(tensorflow)
library(rpart)
library(rsample)
install.packages("rsample")
library(rsample)
library(keras)
library(recipes)
library(tidyverse)
library(yardstick)
install.packages("yardstick")
install_keras()
library(h2o)
install.packages("h2o")
library(h2o)
h2o.init()
# Import a sample binary outcome train/test set into H2O
train <- h2o.importFile("https://s3.amazonaws.com/erin-data/higgs/higgs_train_10k.csv")
test <- h2o.importFile("https://s3.amazonaws.com/erin-data/higgs/higgs_test_5k.csv")
# Identify predictors and response
y <- "response"
x <- setdiff(names(train), y)
# For binary classification, response should be a factor
train[,y] <- as.factor(train[,y])
test[,y] <- as.factor(test[,y])
aml <- h2o.automl(x = x, y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 30)
# View the AutoML Leaderboard
lb <- aml@leaderboard
lb
x
library(h2o)
h2o.init()
# Import a sample binary outcome train/test set into H2O
train <- h2o.importFile("https://s3.amazonaws.com/erin-data/higgs/higgs_train_10k.csv")
test <- h2o.importFile("https://s3.amazonaws.com/erin-data/higgs/higgs_test_5k.csv")
# Identify predictors and response
y <- "response"
x <- setdiff(names(train), y)
# For binary classification, response should be a factor
train[,y] <- as.factor(train[,y])
test[,y] <- as.factor(test[,y])
aml <- h2o.automl(x = x, y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 30)
# View the AutoML Leaderboard
lb <- aml@leaderboard
lb
aml@leader@parameters
library(tidyverse)
library(sjmisc)
q()
echo %QT_PLUGIN_PATH%
setwd("H:/PhD_work/courses/Pwani_effect_measure/git_RR")
